angular.module('mwFormViewer', ['ngSanitize', 'ui.bootstrap','ng-sortable', 'pascalprecht.translate']);



angular.module("mwFormViewer").run(["$templateCache", function($templateCache) {$templateCache.put("mw-form-confirmation-page.html","<div class=mw-form-confirmation-page><div class=mw-confirmation-message ng-if=\"ctrl.submitStatus==\'SUCCESS\'\"><span ng-if=ctrl.confirmationMessage>{{ctrl.confirmationMessage}}</span> <span ng-if=!ctrl.confirmationMessage translate=mwForm.confirmationPage.defaultMessage>Twoja odpowiedź została zapisana</span></div><div class=mw-error-message ng-if=\"ctrl.submitStatus==\'ERROR\'\"><span translate=mwForm.confirmationPage.errorMessage>Bład. Twoja odpowiedź nie została zapisana.</span></div><div class=mw-pending-message ng-if=\"ctrl.submitStatus==\'IN_PROGRESS\'\"><span translate=mwForm.confirmationPage.pendingMessage>Zapisywanie odpowiedzi w trakcie.</span></div></div>");
$templateCache.put("mw-form-question.html","<div class=mw-form-question><div class=mw-question-text>{{ctrl.question.text}} <span ng-if=ctrl.question.required>*</span></div><div class=mw-question-answers ng-switch=ctrl.question.type><div ng-switch-when=text><input class=form-control type=text ng-model=ctrl.questionResponse.answer placeholder=\"{{\'mwForm.question.preview.text\'|translate}}\" ng-required=ctrl.question.required ng-readonly=ctrl.readOnly></div><div ng-switch-when=textarea><textarea msd-elastic class=form-control ng-model=ctrl.questionResponse.answer placeholder=\"{{\'mwForm.question.preview.textarea\'|translate}}\" ng-required=ctrl.question.required ng-readonly=ctrl.readOnly></textarea></div><div ng-switch-when=radio><div class=radio ng-repeat=\"answer in ctrl.question.offeredAnswers\"><label><input type=radio ng-model=ctrl.questionResponse.selectedAnswer ng-value=answer.id name=answer-for-question-{{ctrl.question.id}} ng-change=ctrl.selectedAnswerChanged() ng-required=\"ctrl.question.required &&!ctrl.isOtherAnswer\" ng-disabled=ctrl.readOnly> {{answer.value}}</label></div><div class=radio ng-if=ctrl.question.otherAnswer><label><input type=radio ng-model=ctrl.isOtherAnswer ng-value=true name=other-answer-for-question-{{ctrl.question.id}} ng-change=ctrl.otherAnswerRadioChanged() ng-disabled=ctrl.readOnly><span translate=mwForm.question.preview.otherAnswer>Inna</span>:</label> <span class=form-inline><input type=text name=other-answer-for-question-{{ctrl.question.id}} ng-model=ctrl.questionResponse.other class=form-control ng-disabled=\"!ctrl.isOtherAnswer || ctrl.readOnly\" ng-required=ctrl.isOtherAnswer></span></div></div><div ng-switch-when=checkbox><div class=checkbox ng-repeat=\"answer in ::ctrl.question.offeredAnswers\"><label><input type=checkbox name=answer-for-question-{{ctrl.question.id}} ng-checked=\"ctrl.questionResponse.selectedAnswers.indexOf(answer.id) != -1\" ng-click=ctrl.toggleSelectedAnswer(answer) ng-disabled=ctrl.readOnly> {{::answer.value}}</label></div><div class=checkbox ng-if=ctrl.question.otherAnswer><label><input type=checkbox name=answer-for-question-{{ctrl.question.id}} ng-model=ctrl.isOtherAnswer ng-change=ctrl.otherAnswerCheckboxChanged() ng-disabled=ctrl.readOnly><span translate=mwForm.question.preview.otherAnswer>Inna</span>:</label> <span class=form-inline><input type=text ng-model=ctrl.questionResponse.other name=other-answer-for-question-{{ctrl.question.id}} class=form-control ng-disabled=\"!ctrl.isOtherAnswer || ctrl.readOnly\" ng-required=ctrl.isOtherAnswer></span></div><input type=hidden ng-model=ctrl.selectedAnswer ng-required=\"ctrl.question.required &&!ctrl.isOtherAnswer\"></div><div ng-switch-when=grid><div class=table-responsive><table class=\"table table-condensed table-striped\" border=0 cellpadding=5 cellspacing=0><thead><tr><td></td><td ng-repeat=\"col in ::ctrl.question.grid.cols\"><label>{{::col.label}}</label></td></tr></thead><tbody><tr ng-repeat=\"row in ::ctrl.question.grid.rows\"><td>{{::row.label}}</td><td ng-repeat=\"col in ::ctrl.question.grid.cols\"><input type=radio ng-model=ctrl.questionResponse[row.id] ng-value=col.id name=answer-for-question-{{row.id}} ng-required=ctrl.question.required ng-disabled=ctrl.readOnly></td></tr></tbody></table></div></div><div ng-switch-when=division class=division-list ng-form=ctrl.divisionForm><div class=form-inline style=\"margin-bottom: 5px\" ng-repeat=\"item in ctrl.question.divisionList\"><div class=form-group><label>{{item.value}}</label> <input type=number class=form-control ng-model=ctrl.questionResponse[item.id] min=0 max={{ctrl.question.quantity}} required style=\"width: 80px\" ng-change=ctrl.computeDivisionSum() ng-readonly=ctrl.readOnly> <span>{{::ctrl.question.unit}}</span></div></div><div class=form-inline style=\"margin-bottom: 5px\"><div class=form-group><label translate=mwForm.question.division.assignedSumLabel>Przydzielono</label> <input type=number class=\"form-control strict-validation\" ng-model=ctrl.divisionSum min={{ctrl.question.quantity}} max={{ctrl.question.quantity}} style=\"width: 80px\" readonly> <span>{{ctrl.question.unit}} <span translate=mwForm.question.division.fromRequiredLabel>z wymaganych</span> <strong>{{ctrl.question.quantity}}</strong> {{ctrl.question.unit}} <i ng-show=ctrl.divisionForm.$valid class=\"fa fa-check\" style=color:#008000;></i></span></div></div></div><mw-priority-list ng-switch-when=priority question-response=ctrl.questionResponse question=ctrl.question read-only=ctrl.readOnly></mw-priority-list><div ng-switch-when=number class=form-inline><input class=form-control min={{ctrl.question.min}} max={{ctrl.question.max}} type=number ng-model=ctrl.questionResponse.answer ng-required=ctrl.question.required ng-readonly=ctrl.readOnly></div><div ng-switch-when=date class=form-inline><input class=form-control type=date ng-model=ctrl.questionResponse.answer ng-required=ctrl.question.required ng-readonly=ctrl.readOnly></div><div ng-switch-when=datetime class=form-inline><input class=form-control type=datetime ng-model=ctrl.questionResponse.answer ng-required=ctrl.question.required ng-readonly=ctrl.readOnly></div><div ng-switch-when=time class=form-inline><input class=form-control type=time ng-model=ctrl.questionResponse.answer ng-required=ctrl.question.required ng-readonly=ctrl.readOnly></div><div ng-switch-when=email class=form-inline><input class=form-control type=email ng-model=ctrl.questionResponse.answer ng-required=ctrl.question.required ng-readonly=ctrl.readOnly></div><div ng-switch-when=range class=mw-range><input ng-attr-min={{ctrl.question.min}} ng-attr-max={{ctrl.question.max}} type=range ng-model=ctrl.questionResponse.answer ng-required=ctrl.question.required ng-readonly=ctrl.readOnly><strong class=mw-range-value-label>{{ctrl.questionResponse.answer}}</strong></div><div ng-switch-when=url class=form-inline><input class=form-control type=url ng-model=ctrl.questionResponse.answer ng-required=ctrl.question.required ng-readonly=ctrl.readOnly></div></div></div>");
$templateCache.put("mw-form-viewer-content.html","<div class=mw-form-viewer-content><h1 class=form-title>{{ctrl.formData.name}}</h1><div class=mw-title-page ng-if=\"!ctrl.currentPage && !ctrl.formSubmitted\"><div class=mw-form-description>{{ctrl.formData.description}}</div><button type=button class=\"btn btn-default begin-response-button\" ng-click=ctrl.beginResponse() translate=mwForm.buttons.begin>Rozpocznij</button></div><div class=mw-form-page ng-if=ctrl.currentPage><h2 class=mw-page-title ng-if=\"ctrl.currentPage.namedPage && ctrl.currentPage.name\">{{ctrl.currentPage.name}}</h2><div class=mw-form-page-element-list><div class=mw-page-element ng-repeat=\"pageElement in ctrl.currentPage.elements\" ng-switch=pageElement.type ng-if=ctrl.showElement(pageElement)><mw-form-question ng-switch-when=question question=pageElement.question question-response=ctrl.responseData[pageElement.question.id] read-only=ctrl.readOnly on-response-changed=ctrl.onResponseChanged(pageElement)></mw-form-question><div class=image-element ng-switch-when=image><figure ng-class=\"\'align-\'+pageElement.image.align\"><img ng-src={{pageElement.image.src}} ng-attr-alt=pageElement.image.caption><figcaption ng-if=pageElement.image.caption>{{pageElement.image.caption}}</figcaption></figure></div><div ng-switch-when=paragraph><p ng-bind-html=pageElement.paragraph.html></p></div></div></div></div><mw-form-confirmation-page ng-if=ctrl.formSubmitted confirmation-message=ctrl.formData.confirmationMessage submit-status=ctrl.submitStatus></mw-form-confirmation-page><div class=mw-form-action-list><button type=button ng-if=ctrl.buttons.prevPage.visible class=\"btn btn-default prev-page-button\" ng-click=ctrl.goToPrevPage()><i class=\"fa fa-chevron-left\"></i> <span translate=mwForm.buttons.back>Wstecz</span></button> <button type=button ng-disabled=ctrl.form.$invalid ng-if=ctrl.buttons.nextPage.visible class=\"btn btn-default next-page-button\" ng-click=ctrl.goToNextPage()><span translate=mwForm.buttons.next>Dalej</span> <i class=\"fa fa-chevron-right\"></i></button> <button type=submit ng-disabled=ctrl.form.$invalid ng-if=\"ctrl.buttons.submitForm.visible && !ctrl.readOnly\" class=\"btn btn-default next-page-button\" ng-click=ctrl.submitForm()><span translate=mwForm.buttons.submit>Submit</span></button></div></div>");
$templateCache.put("mw-form-viewer.html","<div class=mw-form-viewer><form ng-if=!ctrl.options.nestedForm name=ctrl.form role=form novalidate ng-include=\"\'mw-form-viewer-content.html\'\"></form><div ng-if=ctrl.options.nestedForm ng-form=ctrl.form ng-include=\"\'mw-form-viewer-content.html\'\"></div></div>");
$templateCache.put("mw-priority-list.html","<div class=mw-priority-list><table><thead><tr><th translate=mwForm.question.priority.sorted>Sorted</th><th translate=mwForm.question.priority.available>Available</th></tr></thead><tbody><tr><td class=mw-ordered-items ng-sortable=ctrl.orderedConfig ng-model=ctrl.questionResponse.priorityList><div class=mw-item ng-repeat=\"item in ctrl.questionResponse.priorityList\"><strong>{{$index+1}}.</strong> {{::ctrl.idToItem[item.id].value}}</div></td><td class=mw-available-items ng-sortable=ctrl.availableConfig ng-model=ctrl.availableItems><div class=mw-item ng-repeat=\"item in ctrl.availableItems\">{{::ctrl.idToItem[item.id].value}}</div></td></tr></tbody></table><input type=hidden ng-model=ctrl.allItemsOrdered ng-required=ctrl.question.required></div>");}]);

angular.module('mwFormViewer')
    .directive('mwPriorityList', function () {

    return {
        replace: true,
        restrict: 'AE',
        require: '^mwFormQuestion',
        scope: {
            question: '=',
            questionResponse: '=',
            readOnly: '=?',
            options: '=?'
        },
        templateUrl: 'mw-priority-list.html',
        controllerAs: 'ctrl',
        bindToController: true,
        controller: function(){
            var ctrl = this;

            if(!ctrl.questionResponse.priorityList){
                ctrl.questionResponse.priorityList=[];
            }
            ctrl.idToItem = {};


            sortByPriority(ctrl.questionResponse.priorityList);

            ctrl.availableItems=[];
            ctrl.question.priorityList.forEach(function(item){
                ctrl.idToItem[item.id] = item;
                var ordered = ctrl.questionResponse.priorityList.some(function(ordered){
                    return item.id == ordered.id;
                });
                if(!ordered){
                    ctrl.availableItems.push({
                        priority: null,
                        id: item.id
                    });
                }
            });

            ctrl.allItemsOrdered=ctrl.availableItems.length==0 ? true : null;


            function updatePriority(array) {
                if(array){
                    for(var i=0; i<array.length; i++){
                        var item = array[i];
                        item.priority = i+1;
                    }
                }

            }

            function sortByPriority(array) {
                array.sort(function (a, b) {
                    return a.priority - b.priority;
                });
            }

            var baseConfig = {
                disabled: ctrl.readOnly,
                ghostClass: "beingDragged"
//                tolerance: 'pointer',
//                items: 'div',
//                revert: 100

            };

            ctrl.orderedConfig = angular.extend({}, baseConfig, {
                group:{
                    name: 'A',
                    pull: false,
                    put: ['B']
                },
                onEnd: function(e, ui) {
                    updatePriority(ctrl.questionResponse.priorityList);
                }
            });

            ctrl.availableConfig = angular.extend({}, baseConfig, {
                sort:false,
                 group:{
                    name: 'B',
                    pull: ['A'],
                    put: false
                },
                onEnd: function(e, ui) {
                    updatePriority(ctrl.questionResponse.priorityList);
                    ctrl.allItemsOrdered=ctrl.availableItems.length==0 ? true : null;
                }
            });

        },
        link: function (scope, ele, attrs, mwFormViewer){
            var ctrl = scope.ctrl;

        }
    };
});


angular.module('mwFormViewer').directive('mwFormViewer', function () {

    return {
        replace: true,
        restrict: 'AE',
        scope: {
            formData: '=',
            responseData: '=',
            readOnly: '=?',
            options: '=?',
            formStatus: '=?', //wrapper for internal angular form object
            onSubmit: '&',
            api: '=?'

        },
        templateUrl: 'mw-form-viewer.html',
        controllerAs: 'ctrl',
        bindToController: true,
        controller: ["$timeout", function($timeout){
            var ctrl = this;

            ctrl.defaultOptions = {
                nestedForm: false,
                autoStart: false
            };
            ctrl.options = angular.extend({}, ctrl.defaultOptions, ctrl.options);

            ctrl.submitStatus='NOT_SUBMITTED';
            ctrl.formSubmitted=false;

            sortPagesByNumber();
            ctrl.pageIdToPage={};
            ctrl.formData.pages.forEach(function(page){
                ctrl.pageIdToPage[page.id]=page;
            });
            
            ctrl.showElement = function(element){
              
              if (!element.question){
                return true;
              }
              
              if (element.question.visibleIf === undefined){
                return true;
              }
              
              if (element.question.visibleIf === false){
                return true;
              }
              
              return ctrl.responseData[element.question.visibleIfQuestion.id].selectedAnswer === element.question.visibleIfAnswer;
            }


            ctrl.buttons={
                prevPage: {
                    visible: false,
                    disabled: false
                },
                nextPage: {
                    visible: false,
                    disabled: false
                },
                submitForm: {
                    visible: false,
                    disabled: false
                }
            };

            ctrl.submitForm = function(){
                ctrl.formSubmitted=true;
                ctrl.submitStatus='IN_PROGRESS';

                ctrl.setCurrentPage(null);


                var resultPromise = ctrl.onSubmit();
                resultPromise.then(function(){
                    ctrl.submitStatus='SUCCESS';
                }).catch(function(){
                    ctrl.submitStatus='ERROR';
                });


            };

            ctrl.setCurrentPage = function (page) {
                ctrl.currentPage = page;
                if(!page){

                    ctrl.buttons.submitForm.visible=false;
                    ctrl.buttons.prevPage.visible=false;

                    ctrl.buttons.nextPage.visible=false;
                    return;
                }

                ctrl.setDefaultNextPage();

                ctrl.initResponsesForCurrentPage();


            };


            ctrl.setDefaultNextPage  = function(){
                var index = ctrl.formData.pages.indexOf(ctrl.currentPage);
                ctrl.currentPage.isFirst = index==0;
                ctrl.currentPage.isLast = index==ctrl.formData.pages.length-1;

                ctrl.buttons.submitForm.visible=ctrl.currentPage.isLast;
                ctrl.buttons.prevPage.visible=!ctrl.currentPage.isFirst;

                ctrl.buttons.nextPage.visible=!ctrl.currentPage.isLast;
                if(ctrl.currentPage.isLast){
                    ctrl.nextPage=null;
                }else{
                    ctrl.nextPage=ctrl.formData.pages[index+1];
                }

                if(ctrl.currentPage.pageFlow){
                    var formSubmit = false;
                    if(ctrl.currentPage.pageFlow.formSubmit){
                        ctrl.nextPage=null;
                        formSubmit = true;
                    }else if(ctrl.currentPage.pageFlow.page){
                        ctrl.nextPage=ctrl.pageIdToPage[ctrl.currentPage.pageFlow.page.id];
                        ctrl.buttons.nextPage.visible=true;
                    }else if(ctrl.currentPage.isLast){
                        ctrl.nextPage=null;
                        formSubmit = true;
                    }
                    ctrl.buttons.submitForm.visible=formSubmit;
                    ctrl.buttons.nextPage.visible=!formSubmit;
                }
            };

            ctrl.initResponsesForCurrentPage = function(){
                ctrl.currentPage.elements.forEach(function(element){
                    var question = element.question;
                    if(question && !ctrl.responseData[question.id]){
                        ctrl.responseData[question.id]={};
                    }
                });
            };

            ctrl.beginResponse=function(){

                if(ctrl.formData.pages.length>0){
                    ctrl.setCurrentPage(ctrl.formData.pages[0]);
                }
            };

            ctrl.resetPages = function(){
                ctrl.prevPages=[];

                ctrl.currentPage=null;
                ctrl.nextPage = null;
                ctrl.formSubmitted=false;
                if(ctrl.options.autoStart){
                    ctrl.beginResponse();
                }

            };
            ctrl.resetPages();

            ctrl.goToPrevPage= function(){
                var prevPage = ctrl.prevPages.pop();
                ctrl.setCurrentPage(prevPage);
                ctrl.updateNextPageBasedOnAllAnswers();
            };

            ctrl.goToNextPage= function(){
                ctrl.prevPages.push(ctrl.currentPage);

                ctrl.updateNextPageBasedOnAllAnswers();

                ctrl.setCurrentPage(ctrl.nextPage);
            };

            ctrl.updateNextPageBasedOnAllAnswers = function(){
                ctrl.currentPage.elements.forEach(function(element){
                    ctrl.updateNextPageBasedOnPageElementAnswers(element);
                });

                ctrl.buttons.submitForm.visible=!ctrl.nextPage;
                ctrl.buttons.nextPage.visible=!!ctrl.nextPage;
            };

            ctrl.updateNextPageBasedOnPageElementAnswers = function (element) {
                var question = element.question;
                if (question && question.pageFlowModifier) {
                    question.offeredAnswers.forEach(function (answer) {
                        if (answer.pageFlow) {
                            if(ctrl.responseData[question.id].selectedAnswer == answer.id){
                                if (answer.pageFlow.formSubmit) {
                                    ctrl.nextPage = null;
                                } else if (answer.pageFlow.page) {
                                    ctrl.nextPage = ctrl.pageIdToPage[answer.pageFlow.page.id];
                                }
                            }
                        }
                    });
                }
            };

            ctrl.onResponseChanged = function(pageElement){
                ctrl.setDefaultNextPage();
                ctrl.updateNextPageBasedOnAllAnswers();
            };

            if(ctrl.api){
                ctrl.api.reset = function(){
                    for (var prop in ctrl.responseData) {
                        if (ctrl.responseData.hasOwnProperty(prop)) {
                            delete ctrl.responseData[prop];
                        }
                    }

                    ctrl.buttons.submitForm.visible=false;
                    ctrl.buttons.prevPage.visible=false;
                    ctrl.buttons.nextPage.visible=false;
                    ctrl.currentPage=null;
                    $timeout(ctrl.resetPages, 0);

                }
            }

            function sortPagesByNumber() {
                ctrl.formData.pages.sort(function(a,b){
                    return a.number - b.number;
                });
            }

        }],
        link: function (scope, ele, attrs){
            var ctrl = scope.ctrl;
            if(ctrl.formStatus){
                ctrl.formStatus.form = ctrl.form;
            }


        }
    };
});


angular.module('mwFormViewer').factory("FormQuestionId", function(){
    var id = 0;
        return {
            next: function(){
                return ++id;
            }
        }
    })

    .directive('mwFormQuestion', function () {

    return {
        replace: true,
        restrict: 'AE',
        require: '^mwFormViewer',
        scope: {
            question: '=',
            questionResponse: '=',
            readOnly: '=?',
            options: '=?',
            onResponseChanged: '&?'
        },
        templateUrl: 'mw-form-question.html',
        controllerAs: 'ctrl',
        bindToController: true,
        controller: ["$timeout", "FormQuestionId", function($timeout,FormQuestionId){
            var ctrl = this;
            ctrl.id = FormQuestionId.next();

            if(ctrl.question.type=='radio'){
                if(!ctrl.questionResponse.selectedAnswer){
                    ctrl.questionResponse.selectedAnswer=null;
                }
                if(ctrl.questionResponse.other){
                    ctrl.isOtherAnswer=true;
                }

            }else if(ctrl.question.type=='checkbox'){
                if(ctrl.questionResponse.selectedAnswers && ctrl.questionResponse.selectedAnswers.length){
                    ctrl.selectedAnswer=true;
                }else{
                    ctrl.questionResponse.selectedAnswers=[];
                }
                if(ctrl.questionResponse.other){
                    ctrl.isOtherAnswer=true;
                }


            }else if(ctrl.question.type=='grid'){
                //if(ctrl.questionResponse.selectedAnswers){
                //
                //}else{
                //    ctrl.questionResponse.selectedAnswers={};
                //}
            }else if(ctrl.question.type=='division'){

                    ctrl.computeDivisionSum = function(){
                        ctrl.divisionSum=0;
                        ctrl.question.divisionList.forEach(function(item){

                            if(ctrl.questionResponse[item.id]!=0 && !ctrl.questionResponse[item.id]){
                                ctrl.questionResponse[item.id]=null;
                                ctrl.divisionSum+=0;
                            }else{
                                ctrl.divisionSum+=ctrl.questionResponse[item.id];
                            }
                        });
                    };

                ctrl.computeDivisionSum();


            }



            ctrl.isAnswerSelected=false;

            ctrl.selectedAnswerChanged=function(){
                delete ctrl.questionResponse.other;
                ctrl.isOtherAnswer=false;
                ctrl.answerChanged();

            };
            ctrl.otherAnswerRadioChanged= function(){
                if(ctrl.isOtherAnswer){
                    ctrl.questionResponse.selectedAnswer=null;
                }
                ctrl.answerChanged();
            };

            ctrl.otherAnswerCheckboxChanged= function(){
                if(!ctrl.isOtherAnswer){
                    delete ctrl.questionResponse.other;
                }
                ctrl.selectedAnswer = ctrl.questionResponse.selectedAnswers.length||ctrl.isOtherAnswer ? true:null ;
                ctrl.answerChanged();
            };


            ctrl.toggleSelectedAnswer= function(answer){
                if (ctrl.questionResponse.selectedAnswers.indexOf(answer.id) === -1) {
                    ctrl.questionResponse.selectedAnswers.push(answer.id);
                } else {
                    ctrl.questionResponse.selectedAnswers.splice(ctrl.questionResponse.selectedAnswers.indexOf(answer.id), 1);
                }
                ctrl.selectedAnswer = ctrl.questionResponse.selectedAnswers.length||ctrl.isOtherAnswer ? true:null ;

                ctrl.answerChanged();
            };

            ctrl.answerChanged = function(){
                if(ctrl.onResponseChanged){
                    ctrl.onResponseChanged();
                }
            }

        }],
        link: function (scope, ele, attrs, mwFormViewer){
            var ctrl = scope.ctrl;

        }
    };
});


angular.module('mwFormViewer')
    .directive('mwFormConfirmationPage', function () {

    return {
        replace: true,
        restrict: 'AE',
        require: '^mwFormViewer',
        scope: {
            submitStatus: '=',
            confirmationMessage: '=',
            readOnly: '=?'
        },
        templateUrl: 'mw-form-confirmation-page.html',
        controllerAs: 'ctrl',
        bindToController: true,
        controller: function(){
            var ctrl = this;


        },
        link: function (scope, ele, attrs, mwFormViewer){
            var ctrl = scope.ctrl;

        }
    };
});
